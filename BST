#include <stdio.h>
#include <stdlib.h>

// Binary Search Tree Node
struct Node {
    int key;
    struct Node *left, *right;
};

// Create a new Node
struct Node* newNode(int item) {
    struct Node* temp = (struct Node*)malloc(sizeof(struct Node));
    temp->key = item;
    temp->left = temp->right = NULL;
    return temp;
}

// Insert a new Node
struct Node* insert(struct Node* node, int key) {
    if (node == NULL) return newNode(key);
    if (key < node->key)
        node->left = insert(node->left, key);
    else if (key > node->key)
        node->right = insert(node->right, key);
    return node;
}

// Find the minimum value node in a BST
struct Node* minValueNode(struct Node* node) {
    struct Node* current = node;
    while (current && current->left != NULL)
        current = current->left;
    return current;
}

// Delete a node from BST
struct Node* deleteNode(struct Node* root, int key) {
    if (root == NULL) return root;

    if (key < root->key)
        root->left = deleteNode(root->left, key);
    else if (key > root->key)
        root->right = deleteNode(root->right, key);
    else {
        if (root->left == NULL) {
            struct Node* temp = root->right;
            free(root);
            return temp;
        } else if (root->right == NULL) {
            struct Node* temp = root->left;
            free(root);
            return temp;
        }
        struct Node* temp = minValueNode(root->right);
        root->key = temp->key;
        root->right = deleteNode(root->right, temp->key);
    }
    return root;
}

// Get the height of a tree
int height(struct Node* node) {
    if (node == NULL) return -1;
    int leftHeight = height(node->left);
    int rightHeight = height(node->right);
    return (leftHeight > rightHeight) ? leftHeight + 1 : rightHeight + 1;
}

// Print the level and height of a given node
void printLevelAndHeight(struct Node* root, int key, int level) {
    if (root == NULL) {
        printf("Node not found\n");
        return;
    }
    if (root->key == key) {
        printf("Level: %d\n", level);
        printf("Height: %d\n", height(root));
    } else if (key < root->key) {
        printLevelAndHeight(root->left, key, level + 1);
    } else {
        printLevelAndHeight(root->right, key, level + 1);
    }
}

// Inorder traversal of BST
void inorder(struct Node* root) {
    if (root != NULL) {
        inorder(root->left);
        printf("%d ", root->key);
        inorder(root->right);
    }
}

int main() {
    int values[] = {30, 20, 40, 10, 25, 35, 45, 5, 15};
    int n = sizeof(values) / sizeof(values[0]);
    struct Node* root = NULL;
    
    // Inserting values into the BST
    for (int i = 0; i < n; i++)
        root = insert(root, values[i]);

    // Printing inorder traversal of BST
    printf("Inorder traversal of BST: ");
    inorder(root);
    printf("\n");

    // Deleting node with key 20
    root = deleteNode(root, 20);
    printf("Inorder traversal after deleting 20: ");
    inorder(root);
    printf("\n");

    // Printing height of BST
    printf("Height of BST: %d\n", height(root));

    // Printing level and height of node with key 30
    printf("Node with key 30: \n");
    printLevelAndHeight(root, 30, 0);

    return 0;
}
